# col  = "#CD0000",  # red3
border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Use comments to disable commands
hist(df$Sepal.Width,
# col  = "#CD0000",  #red3
border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Load base packages manually
library(datasets)  # For example datasets
# LOAD AND PREPARE DATA ####################################
?iris
df <- iris
head(df)
# Use comments to disable commands
hist(df$Sepal.Width,
# col  = "#CD0000",  # red3
border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Use comments to disable commands
hist(df$Sepal.Width,
col  = "#CD0000",  # red3
border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Use comments to disable commands
hist(df$Sepal.Width,
col  = "#CD0000",  # red3
border = NA,  No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Use comments to disable commands
hist(df$Sepal.Width,
# col  = "#CD0000",  # red3
border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Use comments to disable commands
hist(df$Sepal.Width,
# col  = "#CD0000",  # red3
# border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Use comments to disable commands
hist(df$Sepal.Width,
col  = "#CD0000",  # red3
# border = NA,  # No borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Load contributed packages with pacman
pacman::p_load(pacman, party, psych, rio, tidyverse)
# party: for decision trees
# psych: for many statistical procedures
# rio: for importing data
# tidyverse: for so many reasons
Yes
# Load base packages manually
library(datasets)  # For example datasets
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Load contributed packages with pacman
pacman::p_load(pacman, party, psych, rio, tidyverse)
# party: for decision trees
# psych: for many statistical procedures
# rio: for importing data
# tidyverse: for so many reasons
# Save data to "df" (for "data frame")
# Rename outcome as "y" (if it helps)
# Specify outcome with df$y
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
# Import other formats with rio::import() from rio
(df <- import("data/StateData.xlsx") %>% as_tibble())
install.packages("pacman")
install.packages("pacman")
# Load base packages manually
library(datasets)  # For example datasets
?datasets
library(help = "datasets")
# iris data
?iris
iris
# UCBAdmissions
?UCBAdmissions
UCBAdmissions
# Titanic
?Titanic
Titanic
# state.x77
?state.x77
state.x77
#swiss
?swiss
swiss
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
pacman::p_load(pacman, party, rio, tidyverse)
Yes
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
(df <- read_csv("data/StateData.csv"))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(pacman, party, rio, tidyverse)
# Load contributed packages with pacman
pacman::p_load(pacman, party, rio, tidyverse)Yes
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
# Load contributed packages with pacman
pacman::p_load(pacman, party, rio, tidyverse)
(df <- read_csv("data/StateData.csv"))
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
df <- read_csv("data/StateData.csv"))
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Load contributed packages with pacman
pacman::p_load(pacman, party, rio, tidyverse)
if (!require("pacman")) install.packages("pacYYesman")
Yes
# Import CSV files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
x = c(24, 13, 7, 5, 3, 2)  # Sample data
x = c(24, 16, 4, 8, 2, 1)  # Sample data
barplot(x)                 # Default barplot
x = c(100, 75, 65, 50, 25, 12.5)  # Sample data
barplot(x)                 # Default barplot
# Color names R has 657 color names for 502 unique colors,
# arranged alphabetically except for white, which is first
?colors
colors()  # Get list of color names
# Web page with R colors swatches, color names, hex codes,
# RBG codes (in 0-255 and 0.00-1.00), and R indez numbers;
# Browsable table on the page or in Google Sheets;
# downloadable as XLSX or PDF
browseURL("https://datalab.cc/rcolors")
# Color names
barplot(x, col = "tomato3")  # red3
barplot(x, col = "peachpuff4")  # slategray3
barplot(x, col = "peachpuff2")  # peachpuff2
# RGB triplets (0.00-1.00)
barplot(x, col = rgb(.55, .71, .80))      # lightskyblue3
barplot(x, col = rgb(.62, .71, .80))  # slategray3
# RGB triplets (0-255)
barplot(x, col = rgb(205, 0, 0, max = 255))     # red3
barplot(x, col = rgb(159, 182, 205, max = 255)) # slategray3
# RGB hexcodes
barplot(x, col = "#CD0000")  # red3
barplot(x, col = "#9FB6CD")  # slategray3
# Index numbers
barplot(x, col = colors() [555])  # red3
barplot(x, col = colors() [602])  # slategray3
# MULTIPLE COLORS ##########################################
# Can specify several colors in a vector, which will cycle
barplot(x, col = c("lightskyblue2", "tomato3"))
barplot(x, col = c("#9FB6CD", "#CD0000"))
?palette  # Info on palettes
palette() # See current palette
palette() # See current palette
palette() # See current palette
barplot(x, col = 1:6)                # Use current palette
# MULTIPLE COLORS ##########################################
# Can specify several colors in a vector, which will cycle
barplot(x, col = c("lightskyblue2", "tomato3"))
palette() # See current palette
barplot(x, col = rainbow(6))         # Rainbow colors
barplot(x, col = heat.colors(6))     # Yellow through red
barplot(x, col = terrain.colors(6))  # Gray through green
barplot(x, col = topo.colors(6))     # Purple through tan
barplot(x, col = cm.colors(6))       # Pinks and blues
# Clear environment
rm(list = ls())
# Clear environment
rm(list = ls())
# Clear environment
rm(list = ls())
# Clear plots
dev.off()  # But only if there IS a plot
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Using the diamonds dataset from ggplot2
?diamonds  # Get information about the diamonds dataset
diamonds   # Display the beginning of the dataset
?plot     # Get info on "Generic X-Y Plotting
?barplot  # Get info on the "Bar Plots" function
# Shortest method to make a barplot
plot(diamonds$cut)
# Similar process using pipes
diamonds %>%
select(color) %>%
plot()
# Shortest method to make a barplot
plot(diamonds$cut)
# Similar process using pipes
diamonds %>%
select(color) %>%
plot()
# Similar code using barplot(); doesn't work
diamonds %>%
select(clarity) %>%
barplot()  # Error: height must be a vector or a matrix
# Similar code using barplot(); doesn't work
diamonds %>%
select(clarity) %>%
barplot()  # Error: height must be a vector or a matrix
# Create frequency vector with table()
?table
# Try again with table()
diamonds %>%
select(clarity) %>%
table() %>%  # Put data in appropriate format
barplot()
# Sort bars by decreasing values (not for ordinal X)
diamonds %>%
select(clarity) %>%
table() %>%
sort(decreasing = T) %>%  # Sort table
barplot()
# Add options to plot
diamonds %>%
select(clarity) %>%
table() %>%  # Put data in appropriate format
barplot(
main   = "Clarity of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
horiz  = T,  # Draw horizontal bars
ylab   = "Clarity of Diamonds",  # Flip axis labels
xlab   = "Frequency",
xlim   = c(0, 15000),  # Limits for X axis
border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# 100% stacked bar
diamonds %>%
select(color, clarity) %>%
plot()x
# 100% stacked bar
diamonds %>%
select(color, clarity) %>%
plot()x
# Stacked bars: step 1: create table
df <- diamonds %>%
select(color, clarity) %>%
table() %>%
print()  # Show table in Console
# Stacked bars: step 1: create graph
df %>%
barplot(legend = rownames(.))  # Draw plot w/legend
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
diamonds   # Display the beginning of the dataset
# Histogram with defaults
hist(diamonds$price)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
# border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
# border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
border = NA,  # No borders on bars
col    = "tomato1"  # red3
)
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Clear plots
dev.off()  # But only if there IS a plot
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear environment
rm(list = ls())
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
diamonds   # Display the beginning of the dataset
?boxplot  # Get info on the "Bar Plots" function
# Boxplot with defaults
boxplot(diamonds$price)
# Similar process using pipes
diamonds %>%
select(price) %>%
boxplot()
# Boxplot with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
xlab   = "Price of Diamonds",
col    = "#CD0000"  # red3
)
# Boxplot with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
xlab   = "Price of Diamonds",
col    = "#tomato2"  # red3
)
# Boxplot with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
xlab   = "Price of Diamonds",
col    = "#tomato2"  # red3
)
# Boxplot with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
xlab   = "Price of Diamonds",
col    = "tomato1"  # red3
)
# Boxplots by group using plot()
diamonds %>%
select(color, price) %>%
plot()
# Boxplots by group using boxplot()
diamonds %>%
select(color, price) %>%
boxplot(
price ~ color,  # Tilde indicates formula
data  = . ,     # Dot is placeholder for pipe
col   = "Grey"
)
# Clear plots
dev.off()  # But only if there IS a plot
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear environment
rm(list = ls())
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
library(readxl)
StateData <- read_excel("Desktop/Ex_Files_Learning_R/Exercise Files/data/StateData.xlsx")
View(StateData)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df <- import("StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
# Import Deplyr
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
setwd("~/Desktop/class/MechaCar_Statistical_Analysis")
# Import Deplyr
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
LinearModel<-lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar) #create linear model
LinearModel<-lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar) #create linear model
summary(LinearModel) #summarize linear model
Suspension_Coils <- read.csv('Suspension.Coil.csv', check.names = F, stringAsFactors = F)
Suspension_Coils <- read.csv('Suspension_Coil.csv', check.names = F, stringAsFactors = F)
Suspension_Coils <- read.csv('Suspension_Coil.csv', check.names = F, stringAsFactors = F)
Suspension_Coils <- read.csv('Suspension_Coil.csv', check.names = F)
View(Suspension_Coils)
View(Suspension_Coils)
total_summary <- Suspension_Coils %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI)
summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI)
total_summary <- Suspension_Coils %>%
total_summary
total_summary <- Suspension_Coils %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI)
total_summary
total_summary <- Suspension_Coils %>%
summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
total_summary
lot_summary <- Suspension_Coils %>% group_by(Manufaturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups='keep')
lot_summary <- Suspension_Coils %>% group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI), Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups='keep')
lot_summary
?t.test()
t.test(Suspension_Coils$PSI,mu=1500)
t.test(subset(Suspension_Coils,Manufacturing_Lot=="Lot1")$PSI,mu=1500)
t.test(subset(Suspension_Coils,Manufacturing_Lot=="Lot2")$PSI,mu=1500)
t.test(subset(Suspension_Coils,Manufacturing_Lot=="Lot3")$PSI,mu=1500)
View(MechaCar)
View(Suspension_Coils)
View(lot_summary)
View(MechaCar)
View(lot_summary)
View(Suspension_Coils)
